package main

import (
	"flag"
	"fmt"
	"io/fs"
	"io/ioutil"
	"path/filepath"
	"sync"
	"time"
)

var verbose = flag.Bool("v", false, "Prints periodic disk usage if enabled")

func main() {
	var wg sync.WaitGroup
	sizes := make(chan int64)
	flag.Parse()
	roots := flag.Args()
	//fmt.Println(roots)
	if len(roots) == 0 {
		roots = []string{"."}
	}

	for _, dir := range roots {
		wg.Add(1)
		go func(dir string) {
			defer wg.Done()
			walkDir(dir, sizes)
			}(dir)
	}
	go func() {
		wg.Wait()
		//fmt.Println("closing the channel")
		close(sizes)
	}()
	var tick <-chan time.Time
	if *verbose {
		tick = time.Tick(3000 * time.Millisecond)
	}
	var nfiles, nbytes int64
Loop:
	for {
		select {
		case size, ok := <-sizes:
			//fmt.Println("OK is ", ok)
			if !ok {
				//fmt.Println("Not OK")
				break Loop
			}
			nfiles++
			nbytes += size
		case <-tick:
			//fmt.Println("ticking")
			printDiskUsage(nfiles, nbytes)
		}
	}
	printDiskUsage(nfiles, nbytes)
}

func printDiskUsage(nfiles, nbytes int64) {
	fmt.Printf("%d files %.1f GB\n", nfiles, float64(nbytes)/1e9)
}

func walkDir(dir string, filesizes chan<- int64) {
	//fmt.Println("Inside walkdir for ", dir)
	for _, entry := range direntries(dir) {
			if entry.IsDir() {
				subdir := filepath.Join(dir, entry.Name())
				walkDir(subdir, filesizes)
			} else {
				filesizes <- entry.Size()
			}
	}
}

var sema = make(chan struct{}, 20)

func direntries(dir string) []fs.FileInfo {
	sema <- struct{}{}
	defer func() {
		fmt.Println("Read from Sema")
		<-sema
	}()
	fileInfo, err := ioutil.ReadDir(dir)
	if err != nil {
		fmt.Println(err)
	}
	return fileInfo
}
