The Go Prog Language
--------------------
Basic Data Types:
-----------------
 ->int and int32 are not same even if the compiler is a 32-bit compiler
	* refer : https://github.com/hariprathap-hp/GoBookByAADonovan/tree/master/

% operator in goLang:
	->In Go, the sign of the remainder is always the same as the sign of the dividend, so -5%3 and -5%-3 are bot h -2
	
 ->What is overflow?
 	-> If the result of an arithmetic operation doesn't fit it's source/result type's size, then the result is said to be overflowing
 	-> refer : 
 	
 -> What does a len() function return in goLang?
 	-> It returns the length of the data structure as signed integer
 	-> Why signed integer and not unsigned? Because, if it returns an unsigned integer, the condition like "x > 0" will always be true and it will loop forever
 	
 -> Tricks using fmt.Print statements
 	-> refer the code :
 	-> Also refer the link : https://faun.pub/golangs-fmt-sprintf-and-printf-demystified-4adf6f9722a2
 	
 -> Runes are printed using "%c and %q" format specifiers
 
Floating point numbers supported by goLang?
	-> Float32 and Float64
	
Maximum float32 - "math.MaxFloat32" -- provides 6 digits of precision
maximum float64 - "math.MaxFloat64" -- provides 15 digits of precision

	**************************************************************************************************************************
	
Secton 5 - Functions
--------------------
	* Exercise solutions : https://xingdl2007.gitbooks.io/gopl-soljutions/content/chapter-5-functions.html?q=

	**************************************************************************************************************************
	
Section 6 - Methods
-------------------
	Do we have objects in Go? YES
		-> Object is simply a value or variables that has methods
		-> A method is a function associated with a particular type
		
	There is a type Point which is a struct of 2 ints
		type Point struct {
			X int
			Y int
		}
	
		-> Now can we have a method for the type Point with the same name as that of the variable(for example, X?)
		-> No, because the methods and variables share the same namespace
		
Section 6.2
-----------
	-> In realistic program, if any method of any type has a pointer receiver, all the methods of that type should have pointer receiver
	-> But the rule can be broken
	
	-> Method declaration are not permitted on types which are pointers themselves
	-> type P *int
		-> func (P) f() //compiler error
		
	For normal and pointer receiver examples, check the link : https://play.golang.org/p/t3xyJGKGrLH
	
	3 Confusing cases:
		1. 
		
	**************************************************************************************************************************

Section 7 : Interfaces
----------------------
	
	
	**************************************************************************************************************************
